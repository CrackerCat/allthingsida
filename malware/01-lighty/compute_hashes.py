# API hash names computation with AppCall
# AllThingsIDA (c) Elias Bachaalany

import idaapi, idautils, os

def get_module_debug_names(module_name: str) -> dict[int, str]:
    module_name = module_name.lower()
    
    for m in idautils.Modules():
        if module_name in m.name.lower():
            break
    else:
        return {}

    name, ext = os.path.splitext(os.path.basename(m.name))
    sep_idx = len(name) + 1

    dn = idaapi.get_debug_names(
        m.base,
        m.base + m.size)

    r = {}
    for name_ea, name in dn.items():
        r[name_ea] = name[sep_idx:]

    return r

dbg_names = get_module_debug_names("kernel32.dll")
print("enum API_HASHES {")
for ea, name in dbg_names.items():
    h = idaapi.Appcall.hash_str(name, 0)
    print(f"k32_{name} = 0x{h:08X},")
print("};")
